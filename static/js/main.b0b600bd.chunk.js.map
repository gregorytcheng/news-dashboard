{"version":3,"sources":["components/Nav.jsx","components/IndexTable/IndexTableEntry.jsx","utils/DragUtils.js","contexts/IndexContext.js","components/IndexTable/IndexTable.jsx","components/CustomizeIndexOrder/CustomizeIndexOrder.jsx","contexts/NewsFeedContext.js","services/NewsFeedService.js","components/NewsFeeds/NewsFeed.jsx","components/NewsFeeds/NewsFeeds.jsx","components/CustomizeNewsFeedOrder/CustomizeNewsFeedOrder.jsx","components/Homepage.jsx","constants/IndexConstants.js","components/providers/IndexContextProvider.jsx","constants/NewsFeedConstants.js","components/providers/NewsFeedContextProvider.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","Menu","inverted","Item","position","IndexTableEntry","index","List","index_name","Flag","name","country","last_price","style","color","percent_change","point_change","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","getItemStyle","isDragging","draggableStyle","padding","background","IndexContext","createContext","indexOrder","setIndexOrder","addToIndexOrder","removeFromIndexOrder","indexData","undefined","IndexTable","useContext","onDragEnd","destination","newIndices","source","Grid","divided","stackable","columns","length","paddingTop","paddingBottom","droppableId","direction","provided","snapshot","ref","innerRef","isDraggingOver","display","overflow","droppableProps","map","item","Column","key","symbol","draggableId","draggableProps","dragHandleProps","placeholder","Icon","loading","size","CustomizeIndexOrder","useState","popupOpen","setPopupOpen","closePopup","Button","onClick","Portal","onClose","open","Segment","left","top","zIndex","Header","height","Object","keys","indexExistsInOrder","find","backgroundColor","content","marginTop","NewsFeedContext","newsFeedOrder","setNewsFeedOrder","addToNewsFeedOrder","removeFromNewsFeedOrder","allNewsFeeds","herokuEndpoint","NewsFeed","title","headlines","setHeadlines","headlinesLoaded","setHeadlinesLoaded","useEffect","axios","get","then","response","data","catch","error","console","log","getHeadlines","results","as","Feed","headline","Event","Content","Summary","href","target","rel","Meta","NewsFeeds","newNewsFeedOrder","CustomizeNewsFeedOrder","newsFeed","newsFeedExistsInOrder","newsFeedInOrder","Homepage","IndexOrderDefault","IndexContextProvider","children","setIndexData","JSON","parse","localStorage","getItem","setIndexOrderAndPersist","setItem","stringify","Provider","value","newIndex","newIndexOrder","push","indexToRemove","filter","NewsFeedsOrderDefault","NewsFeedContextProvider","setAllNewsFeeds","setNewsFeedOrderAndPersist","newNewsFeed","newsFeedToRemove","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b0b600bd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\nconst Nav = () => (\n  <Menu inverted>\n    <Menu.Item>News Dashboard</Menu.Item>\n    <Menu.Item position=\"right\">Created by Gregory Cheng</Menu.Item>\n  </Menu>\n);\n\nexport default Nav;\n","import React from \"react\";\nimport { List, Flag } from \"semantic-ui-react\";\n\nconst IndexTableEntry = ({ index }) => (\n  <List>\n    <List.Item>\n      {index.index_name} <Flag name={index.country} />\n    </List.Item>\n    <List.Item> {index.last_price}</List.Item>\n    <List.Item\n      style={{\n        color:\n          index.percent_change[0] === \"+\"\n            ? \"green\"\n            : index.percent_change[0] === \"-\"\n            ? \"red\"\n            : \"black\",\n      }}\n    >\n      {index.percent_change} ({index.point_change})\n    </List.Item>\n  </List>\n);\n\nexport default IndexTableEntry;\n","// Helps us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n// Changes\nexport const getItemStyle = (isDragging, draggableStyle) => ({\n  // Separates the draggable items from one another\n  padding: \"1em\",\n\n  // Change background color if dragging\n  background: isDragging ? \"lightgreen\" : \"white\",\n\n  // Other styles\n  ...draggableStyle,\n});\n\nexport const getListStyle = (isDraggingOver) => ({\n  display: \"flex\",\n  overflow: \"auto\",\n});\n","import { createContext } from \"react\";\n\nconst IndexContext = createContext({\n  indexOrder: [],\n  setIndexOrder: () => {},\n  addToIndexOrder: () => {},\n  removeFromIndexOrder: () => {},\n  indexData: undefined,\n});\n\nexport default IndexContext;\n","import React, { useContext } from \"react\";\nimport { Grid, Icon } from \"semantic-ui-react\";\nimport IndexTableEntry from \"./IndexTableEntry\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { reorder, getItemStyle, getListStyle } from \"./../../utils/DragUtils\";\nimport IndexContext from \"../../contexts/IndexContext\";\n\nconst IndexTable = () => {\n  const { indexOrder, setIndexOrder, indexData } = useContext(IndexContext);\n\n  const onDragEnd = (result) => {\n    // If the result is dropped outside of the list, do nothing\n    if (!result.destination) {\n      return;\n    }\n\n    const newIndices = reorder(\n      indexOrder,\n      result.source.index,\n      result.destination.index\n    );\n\n    setIndexOrder(newIndices);\n  };\n\n  return (\n    <>\n      {indexData !== undefined ? (\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Grid\n            divided\n            stackable\n            columns={indexOrder.length}\n            style={{ paddingTop: \"3em\", paddingBottom: \"3em\" }}\n          >\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                  {...provided.droppableProps}\n                >\n                  {indexOrder.map((item, index) => (\n                    <Grid.Column key={item.symbol}>\n                      <Draggable draggableId={item.symbol} index={index}>\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={getItemStyle(\n                              snapshot.isDragging,\n                              provided.draggableProps.style\n                            )}\n                          >\n                            <IndexTableEntry index={indexData[item.symbol]} />\n                          </div>\n                        )}\n                      </Draggable>\n                    </Grid.Column>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </Grid>\n        </DragDropContext>\n      ) : (\n        <Icon loading name=\"spinner\" size=\"large\" />\n      )}\n    </>\n  );\n};\n\nexport default IndexTable;\n","import React, { useState, useContext } from \"react\";\nimport { Button, Portal, Segment, Header } from \"semantic-ui-react\";\nimport IndexContext from \"../../contexts/IndexContext\";\nimport IndexTableEntry from \"../IndexTable/IndexTableEntry\";\n\nconst CustomizeIndexOrder = () => {\n  const {\n    indexOrder,\n    indexData,\n    addToIndexOrder,\n    removeFromIndexOrder,\n  } = useContext(IndexContext);\n\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  const openPopup = () => setPopupOpen(true);\n  const closePopup = () => setPopupOpen(false);\n\n  return (\n    <>\n      <Button onClick={openPopup}>Customize indices</Button>\n      <Portal onClose={closePopup} open={popupOpen}>\n        <Segment\n          style={{\n            left: \"40%\",\n            position: \"fixed\",\n            top: \"10%\",\n            zIndex: 1000,\n          }}\n        >\n          <Header>Customize indices</Header>\n          <p>\n            Add or remove indices here. You can also rearrange the indices on\n            the dashboard.\n          </p>\n          {indexData && (\n            <div style={{ overflow: \"scroll\", height: \"500px\" }}>\n              {Object.keys(indexData).map((symbol) => {\n                const indexExistsInOrder = indexOrder.find(\n                  (index) => index.symbol === symbol\n                );\n                const index = indexData[symbol];\n                return (\n                  <div\n                    key={index.index_name}\n                    style={{\n                      backgroundColor: indexExistsInOrder\n                        ? \"lightgrey\"\n                        : \"white\",\n                      padding: \"1em 0 1em 0\",\n                    }}\n                    onClick={\n                      indexExistsInOrder\n                        ? () => removeFromIndexOrder({ symbol: symbol })\n                        : () => addToIndexOrder({ symbol: symbol })\n                    }\n                  >\n                    <IndexTableEntry index={index} />\n                  </div>\n                );\n              })}\n            </div>\n          )}\n\n          <Button\n            content=\"Close\"\n            onClick={closePopup}\n            style={{ marginTop: \"1em\" }}\n          />\n        </Segment>\n      </Portal>\n    </>\n  );\n};\n\nexport default CustomizeIndexOrder;\n","import { createContext } from \"react\";\n\nconst NewsFeedContext = createContext({\n  newsFeedOrder: [],\n  setNewsFeedOrder: () => {},\n  addToNewsFeedOrder: () => {},\n  removeFromNewsFeedOrder: () => {},\n  allNewsFeeds: [],\n});\n\nexport default NewsFeedContext;\n","import axios from \"axios\";\n\nconst herokuEndpoint = \"https://news-dashboard-flask.herokuapp.com\";\n\nexport const getSources = () => {\n  return axios\n    .get(`${herokuEndpoint}/sources`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const getHeadlines = (source) => {\n  return axios\n    .get(`${herokuEndpoint}/${source}`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const getIndexData = () => {\n  return axios\n    .get(`${herokuEndpoint}/indices`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => console.log(error));\n};\n","import React, { useEffect, useState } from \"react\";\nimport { getHeadlines } from \"../../services/NewsFeedService\";\nimport { Feed, Header, Icon } from \"semantic-ui-react\";\n\nconst NewsFeed = ({ source, title }) => {\n  const [headlines, setHeadlines] = useState([]);\n  const [headlinesLoaded, setHeadlinesLoaded] = useState(false);\n\n  useEffect(() => {\n    getHeadlines(source).then((data) => {\n      setHeadlines(data.results);\n      setHeadlinesLoaded(true);\n    });\n  }, []);\n\n  return (\n    <>\n      <Header as=\"h1\">{title}</Header>\n\n      {!headlinesLoaded ? (\n        <Icon loading name=\"spinner\" size=\"large\" />\n      ) : (\n        <>\n          <Feed>\n            {headlines.map((headline) => (\n              <Feed.Event key={headline.headline}>\n                <Feed.Content>\n                  <Feed.Summary>\n                    <a\n                      href={headline.href}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {headline.headline}\n                    </a>\n                  </Feed.Summary>\n                  <Feed.Meta></Feed.Meta>\n                </Feed.Content>\n              </Feed.Event>\n            ))}\n          </Feed>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default NewsFeed;\n","import React, { useState, useContext } from \"react\";\nimport NewsFeedContext from \"../../contexts/NewsFeedContext\";\nimport { Grid } from \"semantic-ui-react\";\nimport NewsFeed from \"./NewsFeed\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { reorder, getItemStyle, getListStyle } from \"../../utils/DragUtils\";\n\nconst NewsFeeds = () => {\n  const { newsFeedOrder, setNewsFeedOrder } = useContext(NewsFeedContext);\n\n  const onDragEnd = (result) => {\n    if (!result.destination) {\n      return;\n    }\n    const newNewsFeedOrder = reorder(\n      newsFeedOrder,\n      result.source.index,\n      result.destination.index\n    );\n    setNewsFeedOrder(newNewsFeedOrder);\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Grid columns={3} divided stackable>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}\n            >\n              {newsFeedOrder.map((item, index) => (\n                <Grid.Column key={item.source}>\n                  <Draggable draggableId={item.source} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        <NewsFeed title={item.name} source={item.source} />\n                      </div>\n                    )}\n                  </Draggable>\n                </Grid.Column>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </Grid>\n    </DragDropContext>\n  );\n};\n\nexport default NewsFeeds;\n","import React, { useState, useContext } from \"react\";\nimport { Button, Portal } from \"semantic-ui-react\";\nimport NewsFeedContext from \"../../contexts/NewsFeedContext\";\nimport { Segment, Header } from \"semantic-ui-react\";\n\nconst CustomizeNewsFeedOrder = () => {\n  const {\n    newsFeedOrder,\n    setNewsFeedOrder,\n    addToNewsFeedOrder,\n    removeFromNewsFeedOrder,\n    allNewsFeeds,\n  } = useContext(NewsFeedContext);\n\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  const openPopup = () => setPopupOpen(true);\n  const closePopup = () => setPopupOpen(false);\n\n  return (\n    <>\n      <Button onClick={openPopup}>Customize news feeds</Button>\n      <Portal onClose={closePopup} open={popupOpen}>\n        <Segment\n          style={{\n            left: \"40%\",\n            position: \"fixed\",\n            top: \"10%\",\n            zIndex: 1000,\n          }}\n        >\n          <Header>Customize news sources</Header>\n          <p>\n            Add or remove news sources here. You can also rearrange the news\n            feeds on the dashboard.\n          </p>\n          {allNewsFeeds && (\n            <div style={{ overflow: \"scroll\", height: \"500px\" }}>\n              {allNewsFeeds.map((newsFeed) => {\n                const newsFeedExistsInOrder = newsFeedOrder.find(\n                  (newsFeedInOrder) => newsFeedInOrder.name === newsFeed.name\n                );\n                return (\n                  <div\n                    key={newsFeed.source}\n                    style={{\n                      backgroundColor: newsFeedExistsInOrder\n                        ? \"lightgrey\"\n                        : \"white\",\n                      padding: \"1em 0 1em 0\",\n                    }}\n                    onClick={\n                      newsFeedExistsInOrder\n                        ? () => removeFromNewsFeedOrder(newsFeed)\n                        : () => addToNewsFeedOrder(newsFeed)\n                    }\n                  >\n                    {newsFeed.name}\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </Segment>\n      </Portal>\n    </>\n  );\n};\n\nexport default CustomizeNewsFeedOrder;\n","import React from \"react\";\nimport IndexTable from \"./IndexTable/IndexTable\";\nimport CustomizeIndexOrder from \"./CustomizeIndexOrder/CustomizeIndexOrder\";\nimport NewsFeeds from \"./NewsFeeds/NewsFeeds\";\nimport CustomizeNewsFeedOrder from \"./CustomizeNewsFeedOrder/CustomizeNewsFeedOrder\";\n\nconst Homepage = () => {\n  return (\n    <>\n      <IndexTable style={{ paddingTop: \"2em\" }} />\n      <NewsFeeds />\n      <div style={{ paddingTop: \"1em\" }}>\n        <CustomizeIndexOrder />\n        <CustomizeNewsFeedOrder />\n      </div>\n    </>\n  );\n};\n\nexport default Homepage;\n","export const IndexOrderDefault = [\n  {\n    symbol: \"GSPC\",\n  },\n  {\n    symbol: \"DJI\",\n  },\n  {\n    symbol: \"FTSE\",\n  },\n  {\n    symbol: \"STOXX50E\",\n  },\n  {\n    symbol: \"99001.SZ\",\n  },\n  {\n    symbol: \"HSI\",\n  },\n  {\n    symbol: \"N225\",\n  },\n];\n\nexport const INDEX_ORDER_LOCAL_STORAGE_KEY = \"IndexOrder\";\n","import React, { useState, useEffect } from \"react\";\nimport IndexContext from \"../../contexts/IndexContext\";\nimport { getIndexData } from \"../../services/NewsFeedService\";\nimport {\n  IndexOrderDefault,\n  INDEX_ORDER_LOCAL_STORAGE_KEY,\n} from \"../../constants/IndexConstants\";\n\nconst IndexContextProvider = ({ children }) => {\n  const [indexData, setIndexData] = useState(undefined);\n  const [indexOrder, setIndexOrder] = useState(undefined);\n\n  useEffect(() => {\n    getIndexData()\n      .then((data) => {\n        setIndexData(data.results);\n      })\n      .catch((error) => console.log(error));\n    setIndexOrder(\n      JSON.parse(localStorage.getItem(INDEX_ORDER_LOCAL_STORAGE_KEY)) ??\n        IndexOrderDefault\n    );\n  }, []);\n\n  // Wrapper method to save the new index order to the browser's local storage\n  // We're using JSON.stringify and JSON.parse because the localstorage API\n  // must accept a string.\n  const setIndexOrderAndPersist = (indexOrder) => {\n    localStorage.setItem(\n      INDEX_ORDER_LOCAL_STORAGE_KEY,\n      JSON.stringify(indexOrder)\n    );\n    setIndexOrder(indexOrder);\n  };\n\n  const addToIndexOrder = (newIndex) => {\n    const newIndexOrder = Array.from(indexOrder);\n    newIndexOrder.push(newIndex);\n    setIndexOrderAndPersist(newIndexOrder);\n  };\n\n  const removeFromIndexOrder = (indexToRemove) => {\n    const newIndexOrder = indexOrder.filter(\n      (index) => indexToRemove.symbol !== index.symbol\n    );\n    setIndexOrderAndPersist(newIndexOrder);\n  };\n\n  return (\n    <IndexContext.Provider\n      value={{\n        indexOrder,\n        setIndexOrder: setIndexOrderAndPersist,\n        addToIndexOrder,\n        removeFromIndexOrder,\n        indexData,\n      }}\n    >\n      {children}\n    </IndexContext.Provider>\n  );\n};\n\nexport default IndexContextProvider;\n","export const NewsFeedsOrderDefault = [\n  {\n    name: \"CNBC\",\n    source: \"cnbc\",\n  },\n  {\n    name: \"Aljazeera\",\n    source: \"aljazeera\",\n  },\n  {\n    name: \"NPR\",\n    source: \"npr\",\n  },\n];\n\nexport const NEWS_FEED_ORDER_LOCAL_STORAGE_KEY = \"NewsFeedOrder\";\n","import React, { useState, useEffect } from \"react\";\nimport NewsFeedContext from \"../../contexts/NewsFeedContext\";\nimport {\n  NewsFeedsOrderDefault,\n  NEWS_FEED_ORDER_LOCAL_STORAGE_KEY,\n} from \"../../constants/NewsFeedConstants\";\nimport { getSources } from \"../../services/NewsFeedService\";\n\nconst NewsFeedContextProvider = ({ children }) => {\n  const [newsFeedOrder, setNewsFeedOrder] = useState([]);\n  const [allNewsFeeds, setAllNewsFeeds] = useState([]);\n\n  useEffect(() => {\n    setNewsFeedOrder(\n      JSON.parse(localStorage.getItem(NEWS_FEED_ORDER_LOCAL_STORAGE_KEY)) ??\n        NewsFeedsOrderDefault\n    );\n    getSources().then((data) => {\n      setAllNewsFeeds(data.results);\n    });\n  }, []);\n\n  const setNewsFeedOrderAndPersist = (newsFeedOrder) => {\n    localStorage.setItem(\n      NEWS_FEED_ORDER_LOCAL_STORAGE_KEY,\n      JSON.stringify(newsFeedOrder)\n    );\n    setNewsFeedOrder(newsFeedOrder);\n  };\n\n  const addToNewsFeedOrder = (newNewsFeed) => {\n    const newNewsFeedOrder = Array.from(newsFeedOrder);\n    newNewsFeedOrder.push(newNewsFeed);\n    setNewsFeedOrderAndPersist(newNewsFeedOrder);\n  };\n\n  const removeFromNewsFeedOrder = (newsFeedToRemove) => {\n    const newNewsFeedOrder = newsFeedOrder.filter(\n      (newsFeed) => newsFeed.source !== newsFeedToRemove.source\n    );\n    setNewsFeedOrderAndPersist(newNewsFeedOrder);\n  };\n\n  return (\n    <NewsFeedContext.Provider\n      value={{\n        newsFeedOrder,\n        setNewsFeedOrder: setNewsFeedOrderAndPersist,\n        addToNewsFeedOrder,\n        removeFromNewsFeedOrder,\n        allNewsFeeds,\n      }}\n    >\n      {children}\n    </NewsFeedContext.Provider>\n  );\n};\n\nexport default NewsFeedContextProvider;\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport Homepage from \"./components/Homepage\";\nimport { Container } from \"semantic-ui-react\";\nimport IndexContextProvider from \"./components/providers/IndexContextProvider\";\nimport NewsFeedContextProvider from \"./components/providers/NewsFeedContextProvider\";\n\nfunction App() {\n  return (\n    <IndexContextProvider>\n      <NewsFeedContextProvider>\n        <Nav />\n        <Container>\n          <Homepage />\n        </Container>\n      </NewsFeedContextProvider>\n    </IndexContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}