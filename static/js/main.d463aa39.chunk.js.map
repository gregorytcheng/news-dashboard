{"version":3,"sources":["components/Nav.jsx","components/NewsFeed.jsx","services/NewsFeedService.js","components/IndexTable/IndexTableEntry.jsx","contexts/IndexContext.js","components/IndexTable/IndexTable.jsx","utils/DragUtils.js","components/CustomizeIndexOrder/CustomizeIndexOrder.jsx","components/Homepage.jsx","constants/IndexConstants.js","components/providers/IndexContextProvider.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","Menu","inverted","Item","position","NewsFeed","source","title","useState","headlines","setHeadlines","headlinesLoaded","setHeadlinesLoaded","useEffect","axios","get","then","response","data","catch","error","console","log","getHeadlines","results","Header","as","Feed","map","headline","Event","key","Content","Summary","href","target","rel","Meta","Icon","loading","name","size","IndexTableEntry","index","List","index_name","Flag","country","last_price","style","color","percent_change","point_change","IndexContext","createContext","indexOrder","setIndexOrder","addToIndexOrder","removeFromIndexOrder","indexData","undefined","IndexTable","useContext","onDragEnd","result","destination","newIndices","list","startIndex","endIndex","Array","from","splice","removed","reorder","Grid","divided","stackable","columns","length","paddingTop","paddingBottom","droppableId","direction","provided","snapshot","ref","innerRef","isDraggingOver","display","overflow","droppableProps","item","Column","symbol","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","padding","background","placeholder","CustomizeIndexOrder","popupOpen","setPopupOpen","closePopup","Button","onClick","Portal","onClose","open","Segment","left","top","zIndex","height","Object","keys","indexExistsInOrder","find","backgroundColor","content","marginTop","Homepage","Row","IndexOrderDefault","IndexContextProvider","children","setIndexData","JSON","parse","localStorage","getItem","setIndexOrderAndPersist","setItem","stringify","Provider","value","newIndex","newIndexOrder","push","indexToRemove","filter","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d463aa39.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\nconst Nav = () => (\n  <Menu inverted>\n    <Menu.Item>News Dashboard</Menu.Item>\n    <Menu.Item position=\"right\">Created by Gregory Cheng</Menu.Item>\n  </Menu>\n);\n\nexport default Nav;\n","import React, { useEffect, useState } from \"react\";\nimport { getHeadlines } from \"../services/NewsFeedService\";\nimport { Feed, Header, Icon } from \"semantic-ui-react\";\n\nconst NewsFeed = ({ source, title }) => {\n  const [headlines, setHeadlines] = useState([]);\n  const [headlinesLoaded, setHeadlinesLoaded] = useState(false);\n\n  useEffect(() => {\n    getHeadlines(source).then((data) => {\n      setHeadlines(data.results);\n      setHeadlinesLoaded(true);\n    });\n  }, []);\n\n  return (\n    <>\n      <Header as=\"h1\">{title}</Header>\n\n      {!headlinesLoaded ? (\n        <Icon loading name=\"spinner\" size=\"large\" />\n      ) : (\n        <>\n          <Feed>\n            {headlines.map((headline) => (\n              <Feed.Event key={headline.headline}>\n                <Feed.Content>\n                  <Feed.Summary>\n                    <a\n                      href={headline.href}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {headline.headline}\n                    </a>\n                  </Feed.Summary>\n                  <Feed.Meta></Feed.Meta>\n                </Feed.Content>\n              </Feed.Event>\n            ))}\n          </Feed>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default NewsFeed;\n","import axios from \"axios\";\n\nexport const getHeadlines = (source) => {\n  return axios\n    .get(`https://news-dashboard-flask.herokuapp.com/${source}`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const getIndexData = () => {\n  return axios\n    .get(\"https://news-dashboard-flask.herokuapp.com/indices\")\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => console.log(error));\n};\n","import React from \"react\";\nimport { List, Flag } from \"semantic-ui-react\";\n\nconst IndexTableEntry = ({ index }) => (\n  <List>\n    <List.Item>\n      {index.index_name} <Flag name={index.country} />\n    </List.Item>\n    <List.Item> {index.last_price}</List.Item>\n    <List.Item\n      style={{\n        color:\n          index.percent_change[0] === \"+\"\n            ? \"green\"\n            : index.percent_change[0] === \"-\"\n            ? \"red\"\n            : \"black\",\n      }}\n    >\n      {index.percent_change} ({index.point_change})\n    </List.Item>\n  </List>\n);\n\nexport default IndexTableEntry;\n","import { createContext } from \"react\";\n\nconst IndexContext = createContext({\n  indexOrder: [],\n  setIndexOrder: () => {},\n  addToIndexOrder: () => {},\n  removeFromIndexOrder: () => {},\n  indexData: undefined,\n});\n\nexport default IndexContext;\n","import React, { useContext } from \"react\";\nimport { Grid, Icon } from \"semantic-ui-react\";\nimport IndexTableEntry from \"./IndexTableEntry\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { reorder, getItemStyle, getListStyle } from \"./../../utils/DragUtils\";\nimport IndexContext from \"../../contexts/IndexContext\";\n\nconst IndexTable = () => {\n  const { indexOrder, setIndexOrder, indexData } = useContext(IndexContext);\n\n  const onDragEnd = (result) => {\n    // If the result is dropped outside of the list, do nothing\n    if (!result.destination) {\n      return;\n    }\n\n    const newIndices = reorder(\n      indexOrder,\n      result.source.index,\n      result.destination.index\n    );\n\n    setIndexOrder(newIndices);\n  };\n\n  return (\n    <>\n      {indexData !== undefined ? (\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Grid\n            divided\n            stackable\n            columns={indexOrder.length}\n            style={{ paddingTop: \"3em\", paddingBottom: \"3em\" }}\n          >\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                  {...provided.droppableProps}\n                >\n                  {indexOrder.map((item, index) => (\n                    <Grid.Column key={item.symbol}>\n                      <Draggable draggableId={item.symbol} index={index}>\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={getItemStyle(\n                              snapshot.isDragging,\n                              provided.draggableProps.style\n                            )}\n                          >\n                            <IndexTableEntry index={indexData[item.symbol]} />\n                          </div>\n                        )}\n                      </Draggable>\n                    </Grid.Column>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </Grid>\n        </DragDropContext>\n      ) : (\n        <Icon loading name=\"spinner\" size=\"large\" />\n      )}\n    </>\n  );\n};\n\nexport default IndexTable;\n","// Helps us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n// Changes\nexport const getItemStyle = (isDragging, draggableStyle) => ({\n  // Separates the draggable items from one another\n  padding: \"1em\",\n\n  // Change background color if dragging\n  background: isDragging ? \"lightgreen\" : \"white\",\n\n  // Other styles\n  ...draggableStyle,\n});\n\nexport const getListStyle = (isDraggingOver) => ({\n  display: \"flex\",\n  overflow: \"auto\",\n});\n","import React, { useState, useContext } from \"react\";\nimport { Button, Portal, Segment, Header } from \"semantic-ui-react\";\nimport IndexContext from \"../../contexts/IndexContext\";\nimport IndexTableEntry from \"../IndexTable/IndexTableEntry\";\n\nconst CustomizeIndexOrder = () => {\n  const {\n    indexOrder,\n    indexData,\n    addToIndexOrder,\n    removeFromIndexOrder,\n  } = useContext(IndexContext);\n\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  const openPopup = () => setPopupOpen(true);\n  const closePopup = () => setPopupOpen(false);\n\n  return (\n    <div>\n      <Button onClick={openPopup}>Customize Indices</Button>\n      <Portal onClose={closePopup} open={popupOpen}>\n        <Segment\n          style={{\n            left: \"40%\",\n            position: \"fixed\",\n            top: \"10%\",\n            zIndex: 1000,\n          }}\n        >\n          <Header>Customize indices</Header>\n          <p>\n            Add or remove popular indices here. You can also rearrange the\n            indices on the dashboard.\n          </p>\n          {indexData && (\n            <div style={{ overflow: \"scroll\", height: \"500px\" }}>\n              {Object.keys(indexData).map((symbol) => {\n                const indexExistsInOrder = indexOrder.find(\n                  (index) => index.symbol === symbol\n                );\n                const index = indexData[symbol];\n                return (\n                  <div\n                    key={index.index_name}\n                    style={{\n                      backgroundColor: indexExistsInOrder\n                        ? \"lightgreen\"\n                        : \"darksalmon\",\n                      padding: \"1em 0 1em 0\",\n                    }}\n                    onClick={\n                      indexExistsInOrder\n                        ? () => removeFromIndexOrder({ symbol: symbol })\n                        : () => addToIndexOrder({ symbol: symbol })\n                    }\n                  >\n                    <IndexTableEntry index={index} />\n                  </div>\n                );\n              })}\n            </div>\n          )}\n\n          <Button\n            content=\"Close\"\n            onClick={closePopup}\n            style={{ marginTop: \"1em\" }}\n          />\n        </Segment>\n      </Portal>\n    </div>\n  );\n};\n\nexport default CustomizeIndexOrder;\n","import React from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport NewsFeed from \"./NewsFeed\";\nimport IndexTable from \"./IndexTable/IndexTable\";\nimport CustomizeIndexOrder from \"./CustomizeIndexOrder/CustomizeIndexOrder\";\n\nconst Homepage = () => {\n  return (\n    <>\n      <IndexTable style={{ paddingTop: \"2em\" }} />\n      <Grid columns={3} divided stackable>\n        <Grid.Row>\n          <Grid.Column>\n            <NewsFeed title=\"CNBC\" source=\"cnbc\" />\n          </Grid.Column>\n          <Grid.Column>\n            <NewsFeed title=\"Aljazeera\" source=\"aljazeera\" />\n          </Grid.Column>\n          <Grid.Column>\n            <NewsFeed title=\"NPR\" source=\"npr\" />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <CustomizeIndexOrder />\n    </>\n  );\n};\n\nexport default Homepage;\n","export const IndexOrderDefault = [\n  {\n    symbol: \"GSPC\",\n  },\n  {\n    symbol: \"DJI\",\n  },\n  {\n    symbol: \"FTSE\",\n  },\n  {\n    symbol: \"STOXX50E\",\n  },\n  {\n    symbol: \"99001.SZ\",\n  },\n  {\n    symbol: \"HSI\",\n  },\n  {\n    symbol: \"N225\",\n  },\n];\n\nexport const INDEX_ORDER_LOCAL_STORAGE_KEY = \"IndexOrder\";\n","import React, { useState, useEffect } from \"react\";\nimport IndexContext from \"../../contexts/IndexContext\";\nimport { getIndexData } from \"../../services/NewsFeedService\";\nimport {\n  IndexOrderDefault,\n  INDEX_ORDER_LOCAL_STORAGE_KEY,\n} from \"../../constants/IndexConstants\";\n\nconst IndexContextProvider = ({ children }) => {\n  const [indexData, setIndexData] = useState(undefined);\n  const [indexOrder, setIndexOrder] = useState(undefined);\n\n  useEffect(() => {\n    getIndexData()\n      .then((data) => {\n        setIndexData(data.results);\n      })\n      .catch((error) => console.log(error));\n    setIndexOrder(\n      JSON.parse(localStorage.getItem(INDEX_ORDER_LOCAL_STORAGE_KEY)) ??\n        IndexOrderDefault\n    );\n  }, []);\n\n  // Wrapper method to save the new index order to the browser's local storage\n  // We're using JSON.stringify and JSON.parse because the localstorage API\n  // must accept a string.\n  const setIndexOrderAndPersist = (indexOrder) => {\n    localStorage.setItem(\n      INDEX_ORDER_LOCAL_STORAGE_KEY,\n      JSON.stringify(indexOrder)\n    );\n    setIndexOrder(indexOrder);\n  };\n\n  const addToIndexOrder = (newIndex) => {\n    const newIndexOrder = Array.from(indexOrder);\n    newIndexOrder.push(newIndex);\n    setIndexOrderAndPersist(newIndexOrder);\n  };\n\n  const removeFromIndexOrder = (indexToRemove) => {\n    const newIndexOrder = indexOrder.filter(\n      (index) => indexToRemove.symbol !== index.symbol\n    );\n    setIndexOrderAndPersist(newIndexOrder);\n  };\n\n  return (\n    <IndexContext.Provider\n      value={{\n        indexOrder,\n        setIndexOrder: setIndexOrderAndPersist,\n        addToIndexOrder,\n        removeFromIndexOrder,\n        indexData,\n      }}\n    >\n      {children}\n    </IndexContext.Provider>\n  );\n};\n\nexport default IndexContextProvider;\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport Homepage from \"./components/Homepage\";\nimport { Container } from \"semantic-ui-react\";\nimport IndexContextProvider from \"./components/providers/IndexContextProvider\";\n\nfunction App() {\n  return (\n    <IndexContextProvider>\n      <Nav />\n      <Container>\n        <Homepage />\n      </Container>\n    </IndexContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}