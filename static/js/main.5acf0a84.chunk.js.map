{"version":3,"sources":["components/Nav.jsx","components/NewsFeed.jsx","services/NewsFeedService.js","components/IndexTableEntry.jsx","components/IndexTable.jsx","components/Homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","Menu","inverted","Item","position","NewsFeed","source","title","useState","headlines","setHeadlines","headlinesLoaded","setHeadlinesLoaded","useEffect","axios","get","then","response","data","catch","error","console","log","getHeadlines","results","Header","as","Feed","map","headline","Event","key","Content","Summary","href","target","rel","Meta","Icon","loading","name","size","IndexTableEntry","index","countryCode","List","index_name","Flag","last_price","style","color","percent_change","point_change","IndexTable","undefined","indices","setIndices","Grid","divided","stackable","columns","Column","Homepage","paddingTop","Row","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5acf0a84.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\nconst Nav = () => (\n  <Menu inverted>\n    <Menu.Item>News Dashboard</Menu.Item>\n    <Menu.Item position=\"right\">Created by Gregory Cheng</Menu.Item>\n  </Menu>\n);\n\nexport default Nav;\n","import React, { useEffect, useState } from \"react\";\nimport { getHeadlines } from \"../services/NewsFeedService\";\nimport { Feed, Header, Icon } from \"semantic-ui-react\";\n\nconst NewsFeed = ({ source, title }) => {\n  const [headlines, setHeadlines] = useState([]);\n  const [headlinesLoaded, setHeadlinesLoaded] = useState(false);\n\n  useEffect(() => {\n    getHeadlines(source).then((data) => {\n      setHeadlines(data.results);\n      setHeadlinesLoaded(true);\n    });\n  }, []);\n\n  return (\n    <>\n      <Header as=\"h1\">{title}</Header>\n\n      {!headlinesLoaded ? (\n        <Icon loading name=\"spinner\" size=\"large\" />\n      ) : (\n        <>\n          <Feed>\n            {headlines.map((headline) => (\n              <Feed.Event key={headline.headline}>\n                <Feed.Content>\n                  <Feed.Summary>\n                    <a\n                      href={headline.href}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {headline.headline}\n                    </a>\n                  </Feed.Summary>\n                  <Feed.Meta></Feed.Meta>\n                </Feed.Content>\n              </Feed.Event>\n            ))}\n          </Feed>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default NewsFeed;\n","import axios from \"axios\";\n\nexport const getHeadlines = (source) => {\n  return axios\n    .get(`https://news-dashboard-flask.herokuapp.com/${source}`)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const getIndices = () => {\n  return axios\n    .get(\"https://news-dashboard-flask.herokuapp.com/indices\")\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => console.log(error));\n};\n","import React from \"react\";\nimport { List, Flag } from \"semantic-ui-react\";\n\nconst IndexTableEntry = ({ index, countryCode }) => (\n  <List>\n    <List.Item>\n      {index.index_name} <Flag name={countryCode} />\n    </List.Item>\n    <List.Item> {index.last_price}</List.Item>\n    <List.Item\n      style={{\n        color: index.percent_change[0] === \"+\" ? \"green\" : \"red\",\n      }}\n    >\n      {index.percent_change} ({index.point_change})\n    </List.Item>\n  </List>\n);\n\nexport default IndexTableEntry;\n","import React, { useEffect, useState } from \"react\";\nimport { getIndices } from \"../services/NewsFeedService\";\nimport { Grid, Icon } from \"semantic-ui-react\";\nimport IndexTableEntry from \"./IndexTableEntry\";\n\nconst IndexTable = () => {\n  const [indices, setIndices] = useState(undefined);\n\n  useEffect(() => {\n    getIndices()\n      .then((data) => {\n        setIndices(data.results);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  return (\n    <>\n      {indices !== undefined ? (\n        <Grid divided stackable columns={7}>\n          <Grid.Column>\n            <IndexTableEntry index={indices[\"GSPC\"]} countryCode=\"us\" />\n          </Grid.Column>\n          <Grid.Column>\n            <IndexTableEntry index={indices[\"DJI\"]} countryCode=\"us\" />\n          </Grid.Column>\n          <Grid.Column>\n            <IndexTableEntry index={indices[\"FTSE\"]} countryCode=\"uk\" />\n          </Grid.Column>\n          <Grid.Column>\n            <IndexTableEntry index={indices[\"STOXX50E\"]} countryCode=\"eu\" />\n          </Grid.Column>\n          <Grid.Column>\n            <IndexTableEntry index={indices[\"99001.SZ\"]} countryCode=\"cn\" />\n          </Grid.Column>\n          <Grid.Column>\n            <IndexTableEntry index={indices[\"HSI\"]} countryCode=\"hk\" />\n          </Grid.Column>\n          <Grid.Column>\n            <IndexTableEntry index={indices[\"N225\"]} countryCode=\"jp\" />\n          </Grid.Column>\n        </Grid>\n      ) : (\n        <Icon loading name=\"spinner\" size=\"large\" />\n      )}\n    </>\n  );\n};\n\nexport default IndexTable;\n","import React from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport NewsFeed from \"./NewsFeed\";\nimport IndexTable from \"./IndexTable\";\n\nconst Homepage = () => {\n  return (\n    <>\n      <IndexTable style={{ paddingTop: \"2em\" }} />\n\n      <Grid columns={3} divided stackable>\n        <Grid.Row>\n          <Grid.Column>\n            <NewsFeed title=\"CNBC\" source=\"cnbc\" />\n          </Grid.Column>\n          <Grid.Column>\n            <NewsFeed title=\"Aljazeera\" source=\"aljazeera\" />\n          </Grid.Column>\n          <Grid.Column>\n            <NewsFeed title=\"NPR\" source=\"npr\" />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nexport default Homepage;\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport Homepage from \"./components/Homepage\";\nimport { Container } from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <>\n      <Nav />\n      <Container>\n        <Homepage />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}